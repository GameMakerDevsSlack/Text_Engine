<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

test_repeats = 100;
test_string = "The quick brown fox jumped over the lazy dog."; //#Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.#Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.#Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.#Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";

font_texture_width   = 1024;
font_texture_height  = 1024;
font_texture_padding = 6;
font_uvs_map         = ds_map_create();
font_char_min        = 32;
font_char_max        = 127;
font_char_count      = 1 + font_char_max - font_char_min;
font_background      = noone;
font_double_render   = true;

var _surface = surface_create( font_texture_width, font_texture_height );
var _surface_x = 0;
var _surface_y = 0;
var _surface_line_height = 0;

surface_set_target( _surface );

draw_clear_alpha( c_white, 0 );
draw_set_colour( c_white );

for( var _font = 0; _font &lt; 99999; _font++ ) {
    
    if ( !font_exists( _font ) ) continue;
    draw_set_font( _font );
    
    var _char_uvs = undefined;
    _char_uvs[ font_char_count, 4 ] = 0;
    font_uvs_map[? _font ] = _char_uvs;
    
    for( var _ord = font_char_min; _ord &lt;= font_char_max; _ord++ ) {
        
        _char_uvs[ _ord - font_char_min, 5 ] = 0;
        
        var _index = _ord - font_char_min;
        var _char = chr( _ord );
        var _char_width = string_width( _char );
        var _char_height = string_height( _char );
        
        if ( _char_width &lt;= 0 ) continue;
        
        if ( _surface_x + _char_width &gt;= font_texture_width ) {
            _surface_x = 0;
            _surface_y += _surface_line_height;
            _surface_line_height = 0;
        }
        
        draw_text( _surface_x, _surface_y, _char );
        
        _char_uvs[ _index, 0 ] = _surface_x;
        _char_uvs[ _index, 1 ] = _surface_y;
        _char_uvs[ _index, 2 ] = _char_width;
        _char_uvs[ _index, 3 ] = _char_height;
        
        _surface_x += _char_width + font_texture_padding;
        _surface_line_height = max( _surface_line_height, _char_height + font_texture_padding );
        
    }
    
}

surface_reset_target();

font_background = background_create_from_surface( _surface, 0, 0, font_texture_width, font_texture_height, false, false );
font_texture = background_get_texture( font_background );
surface_free( _surface );



var _str = test_string;
var _font = fnt_tnr;
var _uvs = font_uvs_map[? _font ];
var _str_size = string_length( _str );
var _newline_height = string_height( chr(13) );

font_model_surface = surface_create( _str_size, 1 );
surface_set_target( font_model_surface );
for( var _i = 0; _i &lt; _str_size; _i++ ) {
    draw_point_colour( _i, 0, merge_colour( c_red, c_blue, _i/(_str_size-1) ) );
}
surface_reset_target();

font_model = d3d_model_create();
d3d_model_primitive_begin( font_model, pr_trianglelist );

repeat( 1 + (font_double_render &gt; 0) ) {
    
    var _str_x = 0;
    var _str_y = 0;

    for( var _i = 1; _i &lt;= _str_size; _i++ ) {
        
        var _char = string_copy( _str, _i, 1 );
        var _ord = ord( _char );
        if ( _ord == 35 ) {
            _str_x = 0;
            _str_y += _newline_height;
            continue;
        }
        
        var _index = _ord - font_char_min;
        
        var _l = _uvs[ _index, 0 ] / font_texture_width;
        var _t = _uvs[ _index, 1 ] / font_texture_height;
        var _w = _uvs[ _index, 2 ];
        var _h = _uvs[ _index, 3 ];
        var _r = _l + _w / font_texture_width;
        var _b = _t + _h / font_texture_height;
        
        var _colour = make_colour_rgb( 255*( ( (_i-1) / _str_size ) + ( 1 / (1+_str_size) ) ), 0, 0 );
        d3d_model_vertex_texture_colour( font_model,   _str_x     , _str_y     , 0,   _l, _t,   _colour, 1 );
        d3d_model_vertex_texture_colour( font_model,   _str_x + _w, _str_y     , 0,   _r, _t,   _colour, 1 );
        d3d_model_vertex_texture_colour( font_model,   _str_x     , _str_y + _h, 0,   _l, _b,   _colour, 1 );
        
        d3d_model_vertex_texture_colour( font_model,   _str_x + _w, _str_y     , 0,   _r, _t,   _colour, 1 );
        d3d_model_vertex_texture_colour( font_model,   _str_x + _w, _str_y + _h, 0,   _r, _b,   _colour, 1 );
        d3d_model_vertex_texture_colour( font_model,   _str_x     , _str_y + _h, 0,   _l, _b,   _colour, 1 );
        
        _str_x += _w;
        
    }
    
}

d3d_model_primitive_end( font_model );
draw_set_alpha( 1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

var _str_size = string_length( test_string );

var _a = get_timer();
draw_enable_alphablend( false );

surface_set_target( font_model_surface );
for( var _i = 0; _i &lt; _str_size; _i++ ) {
    draw_set_alpha( 0.5 + 0.5*dsin( _i + current_time/5 ) );
    draw_point_colour( _i, 0, make_colour_hsv( ( current_time/5 + 2*_i ) mod 256, 255, 255 ) );
}
draw_set_alpha( 0 );
surface_reset_target();

draw_set_alpha( 1 );
draw_enable_alphablend( true );
_a = get_timer() - _a;

var _b = get_timer();
shader_set( shd_font );
texture_set_stage( shader_get_sampler_index( shd_font, "u_sReference" ), surface_get_texture( font_model_surface ) );
texture_set_interpolation( true );
texture_set_interpolation_ext( shader_get_sampler_index( shd_font, "u_sReference" ), false );
d3d_model_draw( font_model, 5, 35, 0, font_texture );
shader_reset();
_b = get_timer() - _b;

var _c = get_timer();
draw_text( 5, 500, test_string );
_c = get_timer() - _c;

draw_text(   5, 5, _a );
draw_text( 100, 5, _b );
draw_text( 200, 5, _c );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
